import logging
from bson import ObjectId
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (ApplicationBuilder, CommandHandler, ContextTypes,
                          MessageHandler, filters, CallbackQueryHandler)

from models.topic import Topic
from models.topic_priority import TopicPriority
from repos.topic_repository import TopicRepository


class TelegramService:
    def __init__(self, token: str, topic_repository: TopicRepository, moderatorId: str):
        self.application = ApplicationBuilder().token(token).build()
        self.topic_repository = topic_repository
        self.first_count = 15
        self.moderatorId = moderatorId
        self.max_topic_lenght = 250
        self.user_messages = {}
        self.help_message = (
            f"/get_topics - –ü–æ–∫–∞–∑–∞—Ç—å –æ—á–µ—Ä–µ–¥—å —Ç–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É (–ø–µ—Ä–≤—ã–µ {self.first_count} —Ç–µ–º).\n"
            "/get_next_topic - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∞—è —Ç–µ–º–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π.\n"
            "/add_topic —Ç–µ–∫—Å—Ç - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É.\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É."
        )
        
        start_handler = CommandHandler('start', self.start)
        topics_handler = CommandHandler('get_topics', self.get_topics)
        add_topic_handler = CommandHandler('add_topic', self.add_topic)
        get_next_topic_handler = CommandHandler('get_next_topic', self.get_next_topic)
        help_handler = CommandHandler('help', self.help)
    
        message_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), self.unknown_command)
        approval_handler = CallbackQueryHandler(self.handle_approval)
        
        self.application.add_handler(start_handler)
        self.application.add_handler(topics_handler)
        self.application.add_handler(add_topic_handler)
        self.application.add_handler(get_next_topic_handler)
        self.application.add_handler(help_handler)
        self.application.add_handler(approval_handler)
        self.application.add_handler(message_handler)
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        start_message = (
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! –ó–¥–µ—Å—å –º—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞—à–µ–º —ç—Ñ–∏—Ä–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n\n"+self.help_message
        )
        await context.bot.send_message(chat_id=update.effective_chat.id, text=start_message)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await context.bot.send_message(chat_id=update.effective_chat.id, text=self.help_message)

    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
        
    async def get_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        topics = self.topic_repository.get_n_oldest_topics(self.first_count)

        def truncate_topic_text(text: str) -> str:
            if len(text) > self.max_topic_lenght:
                return text[:self.max_topic_lenght] + "..."
            return text
        
        message = f"–ü–µ—Ä–≤—ã–µ {self.first_count} —Ç–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: \n\n"+'\n'.join([f"üî∂ {index + 1}. {truncate_topic_text(topic.text)} \n" for index, topic in enumerate(topics)])
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message or "‚õî –û—á–µ—Ä–µ–¥—å —Ç–µ–º –ø—É—Å—Ç–∞.")
        
    async def add_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        current_timestamp = update.message.date.timestamp()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        if user_id in self.user_messages:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º—Å—Ç–∞–º–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã
            self.user_messages[user_id] = [t for t in self.user_messages[user_id] if current_timestamp - t < 60]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª–µ–µ 3 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            if len(self.user_messages[user_id]) >= 3:
                await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
                return
        else:
            self.user_messages[user_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º—Å—Ç–∞–º–ø –≤ —Å–ø–∏—Å–æ–∫
        self.user_messages[user_id].append(current_timestamp)

        topic_text = ' '.join(context.args)
        if not topic_text:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã.")
            return
        
        if len(topic_text) > self.max_topic_lenght:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚õî –¢–µ–∫—Å—Ç —Ç–µ–º—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {self.max_topic_lenght}.")
            return

        requestor_name = update.message.from_user.first_name or update.message.from_user.username

        topic = self.topic_repository.create_topic(Topic(
            _id=str(ObjectId()),
            topic_priority=TopicPriority.USER.value,
            requestor_name=requestor_name,
            is_allowed=False,
            text=topic_text
        ))
        await self.send_moderation_request(topic, context)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É:\n\n\"{topic_text}\".")
    
    async def get_next_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        topic = self.topic_repository.get_topic_by_priority()
        if topic:
            message = f"‚è© –°–ª–µ–¥—É—â–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n\"{topic.text}\""
        else:
            message = "‚õî –°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    
    async def send_moderation_request(self, topic: Topic, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{topic.id}'),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_{topic.id}')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        text = f"üÜï –ù–æ–≤–∞—è —Ç–µ–º–∞ –æ—Ç {topic.requestor_name}:\n\n{topic.text}"
        await context.bot.send_message(chat_id=self.moderatorId, text=text, reply_markup=reply_markup)

    async def handle_approval(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        verdict_text = ""
        if query.data.startswith('approve_'):
            topic_id = query.data.split('_')[1]
            topic = self.topic_repository.get_topic_by_id(topic_id)
            if topic:
                topic.is_allowed = True
                self.topic_repository.update_topic(topic_id, topic)
                await context.bot.answer_callback_query(callback_query_id=query.id, text="‚úÖ –¢–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
                verdict_text = "\n\n‚úÖ –¢–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
            else:
                await context.bot.answer_callback_query(callback_query_id=query.id, text="–û—à–∏–±–∫–∞: –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        elif query.data.startswith('decline_'):
            await context.bot.answer_callback_query(callback_query_id=query.id, text="‚ùå –¢–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
            verdict_text = "\n\n‚ùå –¢–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –≤–µ—Ä–¥–∏–∫—Ç
        new_text = query.message.text + verdict_text
        await context.bot.edit_message_text(chat_id=query.message.chat_id, 
                                            message_id=query.message.message_id,
                                            text=new_text,
                                            reply_markup=None)

        
    def run(self):
        self.application.run_polling()
