import logging

from bson import ObjectId
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          CommandHandler, ContextTypes, MessageHandler,
                          filters)

from models.topic import Topic
from models.topic_priority import TopicPriority
from repos.topic_repository import TopicRepository
from services.text_filter.text_filter import TextFilter


class TelegramService:
    def __init__(self, token: str, text_filter: TextFilter, topic_repository: TopicRepository, moderatorId: str, donat_url: str):
        self._initialize_handlers(token)
        self.topic_repository = topic_repository
        self.text_filter = text_filter
        self.moderatorId = moderatorId
        self.donat_url = donat_url
        self.first_count = 15
        self.max_topic_lenght = 200
        self.message_count_per_min = 3
        self.user_messages = {}

    def _initialize_handlers(self, token: str):
        self.application = ApplicationBuilder().token(token).build()
        
        handlers = [
            CommandHandler('start', self.start),
            CommandHandler('get_topics', self.get_topics),
            CommandHandler('add_topic', self.add_topic),
            CommandHandler('get_next_topic', self.get_next_topic),
            CommandHandler('rules', self.rules),
            CommandHandler('help', self.help),
            MessageHandler(filters.TEXT & (~filters.COMMAND), self.unknown_command),
            CallbackQueryHandler(self.handle_approval)
        ]
        for handler in handlers:
            self.application.add_handler(handler)

    def _get_help_message(self):
        return (
            "üîπ <b>–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
            f"/get_topics - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å —Ç–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É (–ø–µ—Ä–≤—ã–µ {self.first_count} —Ç–µ–º).\n"
            "/get_next_topic - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫–∞—è —Ç–µ–º–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π.\n"
            "/add_topic —Ç–µ–∫—Å—Ç - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ç–µ–º—É. –í–ê–ñ–ù–û: –û–ø–∏—Å—ã–≤–∞–π—Ç–µ —Ç–µ–º—É –∫–∞–∫ –º–æ–∂–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ, —Ç–æ–≥–¥–∞ –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∫—Ä—É—Ç—ã–º!\n"
            "/rules - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –±–æ—Ç–∞.\n"
            "/help - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.\n\n"
            f"<a href=\"{self.donat_url}\">–ó–∞–¥–∞—Ç—å —Å–≤–æ—é —Ç–µ–º—É –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏</a>"
        )

    def _get_rules_message(self):
        return (
            "‚ùóÔ∏è‚ùóÔ∏è <b>–ü—Ä–∞–≤–∏–ª–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:</b>\n\n"
            "- –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Å–∫–æ—Ä–±–∏—Ç–µ–ª—å–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "- –ò–∑–±–µ–≥–∞–π—Ç–µ —Ç–µ–º, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π, –Ω–∞—Å–∏–ª–∏–µ–º, –¥–∏—Å–∫—Ä–∏–º–∏–Ω–∞—Ü–∏–µ–π –∏–ª–∏ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–æ–º.\n"
            "- –ë—É–¥—å—Ç–µ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã –∫ –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            f"- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Ç–µ–º—ã: {self.max_topic_lenght}.\n"
            "- üëçüèª –†–∞–∑—Ä–µ—à–µ–Ω–æ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π –∏ –º–∞—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤.\nn"
            "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤–∞—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.\n\n"
            "üí° <b>–û –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ—Å—Ç–∏ —Ç–µ–º:</b>\n\n"
            f"- –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –≤–∞—à–∞ —Ç–µ–º–∞ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å <a href=\"{self.donat_url}\">–¥–æ–Ω–∞—Ç–æ–º –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a>.\n"
            "- –¢–µ–º—ã, –∑–∞–¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –±–µ–∑ –¥–æ–Ω–∞—Ç–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –ø–æ –º–µ—Ä–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏. –ü—Ä–∏ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –∂–µ–ª–∞—é—â–∏—Ö –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–æ–∂–µ—Ç –≤–æ–∑—Ä–∞—Å—Ç–∞—Ç—å.\n\n"
        )

    def _truncate_topic_text(self, text: str) -> str:
        return text[:self.max_topic_lenght] + "..." if len(text) > self.max_topic_lenght else text

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞!</b>\n\n"
            "üöÄ –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ —Ç–µ–º—ã –¥–ª—è —ç—Ñ–∏—Ä–∞ –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –æ—á–µ—Ä–µ–¥—å —Ç–µ–º.\n\n"
        )
        start_message = f"{welcome_text}{self._get_rules_message()}{self._get_help_message()}"

        await context.bot.send_message(chat_id=update.effective_chat.id, text=start_message, parse_mode=ParseMode.HTML)


    async def rules(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await context.bot.send_message(chat_id=update.effective_chat.id, text=self._get_rules_message(), parse_mode=ParseMode.HTML)

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await context.bot.send_message(chat_id=update.effective_chat.id, text=self._get_help_message(), parse_mode=ParseMode.HTML)

    async def unknown_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        message = "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.\n\n" + self._get_help_message()
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message, parse_mode=ParseMode.HTML)
        
    async def get_topics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        topics = self.topic_repository.get_n_oldest_topics(self.first_count)
        message = (
            f"–ü–µ—Ä–≤—ã–µ {self.first_count} —Ç–µ–º –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É: \n\n" +
            '\n'.join([f"üî∂ {index + 1}. {self._truncate_topic_text(topic.text)} \n" for index, topic in enumerate(topics)])
        )
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message or "‚õî –û—á–µ—Ä–µ–¥—å —Ç–µ–º –ø—É—Å—Ç–∞.")
        
    async def add_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.message.from_user.id
        current_timestamp = update.message.date.timestamp()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∞—Å—Ç–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        if user_id in self.user_messages:
            # –£–¥–∞–ª—è–µ–º —Ç–∞–π–º—Å—Ç–∞–º–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞—Ä—à–µ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç—ã
            self.user_messages[user_id] = [t for t in self.user_messages[user_id] if current_timestamp - t < 60]
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª–µ–µ n —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
            if len(self.user_messages[user_id]) >= self.message_count_per_min:
                await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
                return
        else:
            self.user_messages[user_id] = []

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º—Å—Ç–∞–º–ø –≤ —Å–ø–∏—Å–æ–∫
        self.user_messages[user_id].append(current_timestamp)

        topic_text = ' '.join(context.args)
        if not topic_text:
            await context.bot.send_message(chat_id=update.effective_chat.id, text="‚õî –í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–µ–∫—Å—Ç —Ç–µ–º—ã.")
            return
        
        if len(topic_text) > self.max_topic_lenght:
            await context.bot.send_message(chat_id=update.effective_chat.id, text=f"‚õî –¢–µ–∫—Å—Ç —Ç–µ–º—ã —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: {self.max_topic_lenght}.")
            return

        requestor_name = update.message.from_user.first_name or update.message.from_user.username

        is_forbidden_text = self.text_filter.is_forbidden(topic_text)

        topic = self.topic_repository.create_topic(Topic(
            _id=str(ObjectId()),
            topic_priority=TopicPriority.USER.value,
            requestor_name=requestor_name,
            is_allowed=not is_forbidden_text,
            text=topic_text
        ))
        
        if is_forbidden_text:
            await self.send_moderation_request(topic, context)
            added_text=f"‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª:\n\n\"{topic_text}\"."
        else:
            added_text=f"‚úÖ –í–∞—à–∞ —Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É:\n\n\"{topic_text}\"."

        await context.bot.send_message(chat_id=update.effective_chat.id, text=added_text)
    
    async def get_next_topic(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        topic = self.topic_repository.get_topic_by_priority()
        if topic:
            message = f"‚è© –°–ª–µ–¥—É—â–∞—è —Ç–µ–º–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n\n\"{topic.text}\""
        else:
            message = "‚õî –°–ø–∏—Å–æ–∫ —Ç–µ–º –ø—É—Å—Ç."
        await context.bot.send_message(chat_id=update.effective_chat.id, text=message)
    
    async def send_moderation_request(self, topic: Topic, context: ContextTypes.DEFAULT_TYPE):
        keyboard = [[
            InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_{topic.id}'),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_{topic.id}')
        ]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        text = f"üÜï –ù–æ–≤–∞—è —Ç–µ–º–∞ –æ—Ç {topic.requestor_name}:\n\n{topic.text}"
        await context.bot.send_message(chat_id=self.moderatorId, text=text, reply_markup=reply_markup)

    async def handle_approval(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        verdict_text = ""
        if query.data.startswith('approve_'):
            topic_id = query.data.split('_')[1]
            topic = self.topic_repository.get_topic_by_id(topic_id)
            if topic:
                topic.is_allowed = True
                self.topic_repository.update_topic(topic_id, topic)
                await context.bot.answer_callback_query(callback_query_id=query.id, text="‚úÖ –¢–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!")
                verdict_text = "\n\n‚úÖ –¢–µ–º–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!"
            else:
                await context.bot.answer_callback_query(callback_query_id=query.id, text="–û—à–∏–±–∫–∞: –¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

        elif query.data.startswith('decline_'):
            await context.bot.answer_callback_query(callback_query_id=query.id, text="‚ùå –¢–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!")
            verdict_text = "\n\n‚ùå –¢–µ–º–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞!"
        
        # –ò–∑–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–±–∞–≤–ª—è—è –≤–µ—Ä–¥–∏–∫—Ç
        new_text = query.message.text + verdict_text
        await context.bot.edit_message_text(chat_id=query.message.chat_id, message_id=query.message.message_id, text=new_text, reply_markup=None)
        
    def run(self):
        self.application.run_polling()
